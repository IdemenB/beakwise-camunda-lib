/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use crate::{errors::errors::CamundaClientError, utils::url_encode};
use reqwest;

use super::configuration;

pub struct TaskCommentApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl TaskCommentApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> TaskCommentApiClient {
        TaskCommentApiClient { configuration }
    }
}

pub trait TaskCommentApi {
    fn create_comment(
        &self,
        id: &str,
        comment_dto: Option<crate::models::CommentDto>,
    ) -> Result<crate::models::CommentDto, CamundaClientError>;
    fn get_comment(
        &self,
        id: &str,
        comment_id: &str,
    ) -> Result<crate::models::CommentDto, CamundaClientError>;
    fn get_comments(&self, id: &str) -> Result<Vec<crate::models::CommentDto>, CamundaClientError>;
}

impl TaskCommentApi for TaskCommentApiClient {
    fn create_comment(
        &self,
        id: &str,
        comment_dto: Option<crate::models::CommentDto>,
    ) -> Result<crate::models::CommentDto, CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/comment/create",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&comment_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_comment(
        &self,
        id: &str,
        comment_id: &str,
    ) -> Result<crate::models::CommentDto, CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/comment/{commentId}",
            configuration.base_path,
            id = url_encode::url_encode(id),
            commentId = url_encode::url_encode(comment_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_comments(&self, id: &str) -> Result<Vec<crate::models::CommentDto>, CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/comment",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
