/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 *
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
use std::borrow::Borrow;
use std::option::Option;
use std::sync::Arc;

use crate::errors::errors::WorkflowError;

use super::configuration;

pub struct ConditionApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl ConditionApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> ConditionApiClient {
        ConditionApiClient { configuration }
    }
}

#[async_trait]
pub trait ConditionApi {
    async fn evaluate_condition(
        &self,
        evaluation_condition_dto: Option<crate::models::EvaluationConditionDto>,
    ) -> Result<Vec<crate::models::ProcessInstanceDto>, WorkflowError>;
}

#[async_trait]
impl ConditionApi for ConditionApiClient {
    async fn evaluate_condition(
        &self,
        evaluation_condition_dto: Option<crate::models::EvaluationConditionDto>,
    ) -> Result<Vec<crate::models::ProcessInstanceDto>, WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/condition", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&evaluation_condition_dto);

        // send request
        let resp = req_builder.send().await?;

        Ok(resp.error_for_status()?.json().await?)
    }
}
