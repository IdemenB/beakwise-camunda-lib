/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::{errors::errors::WorkflowError, utils::url_encode};
use reqwest;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use super::configuration;

pub struct TaskVariableApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl TaskVariableApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> TaskVariableApiClient {
        TaskVariableApiClient { configuration }
    }
}

pub trait TaskVariableApi {
    fn delete_task_variable(&self, id: &str, var_name: &str) -> Result<(), WorkflowError>;
    fn get_task_variable(
        &self,
        id: &str,
        var_name: &str,
        deserialize_value: Option<bool>,
    ) -> Result<crate::models::VariableValueDto, WorkflowError>;
    fn get_task_variable_binary(
        &self,
        id: &str,
        var_name: &str,
    ) -> Result<std::path::PathBuf, WorkflowError>;
    fn get_task_variables(
        &self,
        id: &str,
        deserialize_value: Option<bool>,
    ) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, WorkflowError>;
    fn modify_task_variables(
        &self,
        id: &str,
        patch_variables_dto: Option<crate::models::PatchVariablesDto>,
    ) -> Result<(), WorkflowError>;
    fn put_task_variable(
        &self,
        id: &str,
        var_name: &str,
        variable_value_dto: Option<crate::models::VariableValueDto>,
    ) -> Result<(), WorkflowError>;
    fn set_binary_task_variable(
        &self,
        id: &str,
        var_name: &str,
        data: Option<std::path::PathBuf>,
        value_type: Option<&str>,
    ) -> Result<(), WorkflowError>;
}

impl TaskVariableApi for TaskVariableApiClient {
    fn delete_task_variable(&self, id: &str, var_name: &str) -> Result<(), WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables/{varName}",
            configuration.base_path,
            id = url_encode::url_encode(id),
            varName = url_encode::url_encode(var_name)
        );
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_task_variable(
        &self,
        id: &str,
        var_name: &str,
        deserialize_value: Option<bool>,
    ) -> Result<crate::models::VariableValueDto, WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables/{varName}",
            configuration.base_path,
            id = url_encode::url_encode(id),
            varName = url_encode::url_encode(var_name)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = deserialize_value {
            req_builder = req_builder.query(&[("deserializeValue", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_task_variable_binary(
        &self,
        id: &str,
        var_name: &str,
    ) -> Result<std::path::PathBuf, WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables/{varName}/data",
            configuration.base_path,
            id = url_encode::url_encode(id),
            varName = url_encode::url_encode(var_name)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_task_variables(
        &self,
        id: &str,
        deserialize_value: Option<bool>,
    ) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, WorkflowError>
    {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = deserialize_value {
            req_builder = req_builder.query(&[("deserializeValue", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn modify_task_variables(
        &self,
        id: &str,
        patch_variables_dto: Option<crate::models::PatchVariablesDto>,
    ) -> Result<(), WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&patch_variables_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn put_task_variable(
        &self,
        id: &str,
        var_name: &str,
        variable_value_dto: Option<crate::models::VariableValueDto>,
    ) -> Result<(), WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables/{varName}",
            configuration.base_path,
            id = url_encode::url_encode(id),
            varName = url_encode::url_encode(var_name)
        );
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&variable_value_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn set_binary_task_variable(
        &self,
        id: &str,
        var_name: &str,
        data: Option<std::path::PathBuf>,
        value_type: Option<&str>,
    ) -> Result<(), WorkflowError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/variables/{varName}/data",
            configuration.base_path,
            id = url_encode::url_encode(id),
            varName = url_encode::url_encode(var_name)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        let mut form = reqwest::multipart::Form::new();
        if let Some(param_value) = data {
            form = form.file("data", param_value)?;
        }
        if let Some(param_value) = value_type {
            form = form.text("valueType", param_value.to_string());
        }
        req_builder = req_builder.multipart(form);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
