/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 *
 * Generated by: https://openapi-generator.tech
 */
use async_trait::async_trait;

use std::option::Option;
use std::{borrow::Borrow, sync::Arc};

pub use reqwest;
pub use serde;
pub use serde_derive;
pub use serde_json;
pub use url;

use crate::errors::errors::CamundaClientError;

use super::configuration;

pub struct MessageApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl MessageApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> MessageApiClient {
        MessageApiClient { configuration }
    }
}
#[async_trait]
pub trait MessageApi {
    async fn deliver_message(
        &self,
        correlation_message_dto: Option<crate::models::CorrelationMessageDto>,
    ) -> Result<Vec<crate::models::MessageCorrelationResultWithVariableDto>, CamundaClientError>;
}

#[async_trait]
impl MessageApi for MessageApiClient {
    async fn deliver_message(
        &self,
        correlation_message_dto: Option<crate::models::CorrelationMessageDto>,
    ) -> Result<Vec<crate::models::MessageCorrelationResultWithVariableDto>, CamundaClientError>
    {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/message", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&correlation_message_dto);

        // send request
        let resp = req_builder.send().await?;

        Ok(resp.error_for_status()?.json().await?)
    }
}
