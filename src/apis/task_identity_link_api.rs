/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::{errors::errors::CamundaClientError, utils::url_encode};
use async_trait::async_trait;
use reqwest;
use std::borrow::Borrow;
use std::option::Option;
use std::sync::Arc;

use super::configuration;

pub struct TaskIdentityLinkApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl TaskIdentityLinkApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> TaskIdentityLinkApiClient {
        TaskIdentityLinkApiClient { configuration }
    }
}

#[async_trait]
pub trait TaskIdentityLinkApi {
    async fn add_identity_link(
        &self,
        id: &str,
        identity_link_dto: Option<crate::models::IdentityLinkDto>,
    ) -> Result<(), CamundaClientError>;
    async fn delete_identity_link(
        &self,
        id: &str,
        identity_link_dto: Option<crate::models::IdentityLinkDto>,
    ) -> Result<(), CamundaClientError>;
    async fn get_identity_links(
        &self,
        id: &str,
        _type: Option<&str>,
    ) -> Result<Vec<crate::models::IdentityLinkDto>, CamundaClientError>;
}

#[async_trait]
impl TaskIdentityLinkApi for TaskIdentityLinkApiClient {
    async fn add_identity_link(
        &self,
        id: &str,
        identity_link_dto: Option<crate::models::IdentityLinkDto>,
    ) -> Result<(), CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/identity-links",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&identity_link_dto);

        // send request
        let resp = req_builder.send().await?;

        resp.error_for_status()?.json().await?;
        Ok(())
    }

    async fn delete_identity_link(
        &self,
        id: &str,
        identity_link_dto: Option<crate::models::IdentityLinkDto>,
    ) -> Result<(), CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/identity-links/delete",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&identity_link_dto);

        // send request
        let resp = req_builder.send().await?;

        resp.error_for_status()?.json().await?;
        Ok(())
    }

    async fn get_identity_links(
        &self,
        id: &str,
        _type: Option<&str>,
    ) -> Result<Vec<crate::models::IdentityLinkDto>, CamundaClientError> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/task/{id}/identity-links",
            configuration.base_path,
            id = url_encode::url_encode(id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = _type {
            req_builder = req_builder.query(&[("type", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let resp = req_builder.send().await?;

        Ok(resp.error_for_status()?.json().await?)
    }
}
